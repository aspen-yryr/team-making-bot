/**
 * @fileoverview gRPC-Web generated client stub for match
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.6
// source: proto/match/match.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var proto_match_user_pb = require('../../proto/match/user_pb.js')
const proto = {};
proto.match = require('./match_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.match.MatchSvcClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.match.MatchSvcPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.match.CreateUserRequest,
 *   !proto.match.CreateUserResponse>}
 */
const methodDescriptor_MatchSvc_CreateUser = new grpc.web.MethodDescriptor(
  '/match.MatchSvc/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.match.CreateUserRequest,
  proto.match.CreateUserResponse,
  /**
   * @param {!proto.match.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.match.CreateUserResponse.deserializeBinary
);


/**
 * @param {!proto.match.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.match.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.match.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.match.MatchSvcClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/match.MatchSvc/CreateUser',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_CreateUser,
      callback);
};


/**
 * @param {!proto.match.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.match.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.match.MatchSvcPromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/match.MatchSvc/CreateUser',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.match.CreateMatchRequest,
 *   !proto.match.CreateMatchResponse>}
 */
const methodDescriptor_MatchSvc_Create = new grpc.web.MethodDescriptor(
  '/match.MatchSvc/Create',
  grpc.web.MethodType.UNARY,
  proto.match.CreateMatchRequest,
  proto.match.CreateMatchResponse,
  /**
   * @param {!proto.match.CreateMatchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.match.CreateMatchResponse.deserializeBinary
);


/**
 * @param {!proto.match.CreateMatchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.match.CreateMatchResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.match.CreateMatchResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.match.MatchSvcClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/match.MatchSvc/Create',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_Create,
      callback);
};


/**
 * @param {!proto.match.CreateMatchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.match.CreateMatchResponse>}
 *     Promise that resolves to the response
 */
proto.match.MatchSvcPromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/match.MatchSvc/Create',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.match.FindRequest,
 *   !proto.match.FindResponse>}
 */
const methodDescriptor_MatchSvc_Find = new grpc.web.MethodDescriptor(
  '/match.MatchSvc/Find',
  grpc.web.MethodType.UNARY,
  proto.match.FindRequest,
  proto.match.FindResponse,
  /**
   * @param {!proto.match.FindRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.match.FindResponse.deserializeBinary
);


/**
 * @param {!proto.match.FindRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.match.FindResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.match.FindResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.match.MatchSvcClient.prototype.find =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/match.MatchSvc/Find',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_Find,
      callback);
};


/**
 * @param {!proto.match.FindRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.match.FindResponse>}
 *     Promise that resolves to the response
 */
proto.match.MatchSvcPromiseClient.prototype.find =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/match.MatchSvc/Find',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_Find);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.match.AppendMemberRequest,
 *   !proto.match.Match>}
 */
const methodDescriptor_MatchSvc_AppendMembers = new grpc.web.MethodDescriptor(
  '/match.MatchSvc/AppendMembers',
  grpc.web.MethodType.UNARY,
  proto.match.AppendMemberRequest,
  proto.match.Match,
  /**
   * @param {!proto.match.AppendMemberRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.match.Match.deserializeBinary
);


/**
 * @param {!proto.match.AppendMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.match.Match)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.match.Match>|undefined}
 *     The XHR Node Readable Stream
 */
proto.match.MatchSvcClient.prototype.appendMembers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/match.MatchSvc/AppendMembers',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_AppendMembers,
      callback);
};


/**
 * @param {!proto.match.AppendMemberRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.match.Match>}
 *     Promise that resolves to the response
 */
proto.match.MatchSvcPromiseClient.prototype.appendMembers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/match.MatchSvc/AppendMembers',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_AppendMembers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.match.ShuffleRequest,
 *   !proto.match.ShuffleResponse>}
 */
const methodDescriptor_MatchSvc_Shuffle = new grpc.web.MethodDescriptor(
  '/match.MatchSvc/Shuffle',
  grpc.web.MethodType.UNARY,
  proto.match.ShuffleRequest,
  proto.match.ShuffleResponse,
  /**
   * @param {!proto.match.ShuffleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.match.ShuffleResponse.deserializeBinary
);


/**
 * @param {!proto.match.ShuffleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.match.ShuffleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.match.ShuffleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.match.MatchSvcClient.prototype.shuffle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/match.MatchSvc/Shuffle',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_Shuffle,
      callback);
};


/**
 * @param {!proto.match.ShuffleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.match.ShuffleResponse>}
 *     Promise that resolves to the response
 */
proto.match.MatchSvcPromiseClient.prototype.shuffle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/match.MatchSvc/Shuffle',
      request,
      metadata || {},
      methodDescriptor_MatchSvc_Shuffle);
};


module.exports = proto.match;

